Herewith a brief explanation of the key points wherein Ponscripter
differs from the ONScripter-En you know and love.


In no particular order, I'm afraid.


/---------------------------------------------------------------------
|  Filenames

NScripter script files and Ponscripter script files have different
names, as follows:

  *.txt        -> *.utf
  nscript.*    -> pscript.*
  nscr_sec.dat -> pscr_sec.dat

Ponscripter can still play NScripter games, though it is not as
compatible as ONScripter in this regard; NScripter mode has not been
extensively tested.  In general, if you're using Ponscripter, you
should make the effort to port it.  Unicode is a Good Thing.

(If you wish to adapt an NScripter game to behave differently with
Ponscripter while still working with NScripter and ONScripter, you can
keep the script in the old Shift_JIS format and define a numalias
PONSCRIPTER as 0; Ponscripter will sneakily modify the definition to
give it the value 1 instead, so you can use "if PONSCRIPTER == 1" to
execute code conditionally depending on the interpreter in use.  Note
however that most of the features described below are not available in
compatibility mode.  This might actually be most useful for displaying
an error message in games known NOT to work with Ponscripter... ^^;)

---//---

An additional point to note is that while ONScripter makes some feeble
and generally unreliable attempts to access files with Japanese names,
Ponscripter deliberately restricts filenames to ASCII.  (You can
probably still access files with Japanese names if those files are
within archives, since the .nsa and .sar formats specify CP932 for
filename encodings; but you can't if they're sitting there in the
filesystem, since the filesystem could be encoded in any of a
bazillion different incompatible ways, and we don't even try to
guess.)

If this is really, really a problem for you, and you have a really,
REALLY good reason why you absolutely HAVE to use special characters
in your filenames and there is simply NO possibility that you could
just take a deep breath and rename the files to something sensible,
then feel free to either implement this feature yourself, or show me
how important it is to you in Euros.  :)


/---------------------------------------------------------------------
|  Directives

NScripter files can optionally begin with a resolution directive,
which is usually omitted for 640x480 games and included in 800x600
games: it takes the form of a comment at the very start of the file,
either

  ;mode640
  
or
 
  ;mode800

As with ONScripter-En, in Ponscripter this directive can additionally
be followed by a second directive, which takes the form

  ;gameid Your name here

This second directive, if present, must be preceded by a resolution
directive.  It is used on most platforms to name a folder for the
game's saved data, which will typically be:

  OS X: ~/Library/Application Support/[gameid]
  Linux: ~/.[gameid]
  Win2k/XP: C:\Documents and Settings\All Users\Application Data\[gameid]
  Vista: C:\ProgramData\[gameid]

(Note that on OS X and *nix saved games are per-user, while on Windows
they are currently shared between all users.  This latter could easily
be changed if so desired.)

If the gameid directive is absent, Ponscripter tries to determine the
game's name from a `caption' or `versionstr' command in the *define
section (if both are found, it takes the shorter).  If that also
fails, a semi-unique identifier is generated from the length of the
script.


/---------------------------------------------------------------------
|  h_mapfont <int>, <string>, [metrics file]

This command must be used in the *define section.

Ponscripter supports up to 8 fonts/styles at a time. The intended
convention is that this should represent two typefaces (a text face
and a display face), each with regular, italic, bold, and bold italic
styles. Naturally this is not enforced, though the style tag system
was devised with this convention in mind. (See "Style tags" below for
more details.)

Unlike ONScripter, there are no requirements as to the nature of the
fonts used. They need not be TrueType, Japanese, monospaced, or called
"default.ttf".

By default, each style N is associated with a file "faceN.ttf", which
may either be in the game folder (a la ONScripter's "default.ttf"), in
a subfolder called "fonts", in the game's main archive, or embedded in
the game EXE itself.  To use fonts with different names, or to use
non-TrueType fonts, the mappings must be set manually with the
h_mapfont command; user-defined fonts are sought in the same places as
the default names.

As you might expect, <int> is the font slot to be mapped (0-7), and
<string> is the filename (relative to the game's data path) of the
font to use; if the file so named does not exist, it is sought in the
game's archive and finally in the EXE file; if no font is found, the
game will crash at the point where that font face is first used (_not_
when the directive is processed!).  The font formats supported are
those supported by the Freetype library used by the game - in the
official Ponscripter binaries this will normally mean TrueType,
OpenType, and Type 1 fonts, but other formats can be compiled in if
desired.

For Type 1 fonts, the outlines and metrics for each font are stored in
separate files: the outlines in either a .pfa or .pfb, and the metrics
in a .afm.  Both files are required for acceptable output.  The .pfa
or .pfb should be given as the font, and the .afm given in the extra
<metrics file> parameter.

For example, given a "fonts" subdirectory of the game's data directory
that contains the standard GhostScript outline fonts, one could use
the command

  h_mapfont 2, "n021004l.pfb", "n021004l.afm"

to assign URW Nimbus Roman Bold (a Times clone) to slot 2, which by
convention is the bold weight of the text font.

Note that fonts must still be stored as part of and distributed with
the game. It is not possible to use fonts that are installed on the
user's computer.

For compatibility with ONScripter, if a font (mapped or otherwise) is
not found, "default.ttf" in the game directory is tried as a fallback
measure.


/---------------------------------------------------------------------
|  Syntax changes

The most major change is that [O]NScripter files are encoded in
Shift_JIS, while Ponscripter files must be encoded in UTF-8.

In ONscripter, ASCII text is marked with the ` character in one of
three ways:
  some_command "`ASCII parameter"
  some_command `ASCII parameter`
  `ASCII display text\

In Ponscripter, all these examples use the ^ character instead:
  some_command "^UTF-8 text"
  some_command ^UTF-8 text^
  ^UTF-8 display text\

The reason for this change is that in order to make typing English
text convenient, Ponscripter introduces ASCII shortcuts for some
common characters:

  `single curly quotes'
  ``double curly quotes''   (or ``double curly quotes")

Naturally you can also use the proper UTF-8 characters, but most
keyboards can't type them conveniently.

To type two consecutive quotation marks, use a ZWNJ (zero-width
non-joiner) to separate them.  Since there are probably no keyboards
that can type a ZWNJ, the character | serves this purpose; to get a |
in your text, use ||.  Hence, to write text with nested quotations,
you might use a line like

  ^``He told me he'd `never leave me,'|'' she sobbed.\

Some recent versions of NScripter have a limited form of ASCII text
support with lines introduced by the > character.  This syntax is not
currently recognised, not even in NScripter mode.
  

/---------------------------------------------------------------------
|  h_ligate <string>, <int>
|  h_ligate <string>, <string>
|  h_ligate <string>, remove
|  h_ligate <predefined set>

Additional shortcuts/ligatures can be defined (or existing shortcuts
undefined) using the h_ligate command.  As text is rendered, it's
checked for known character sequences, which are replaced with a
single character if a suitable glyph is available in the current font.

The first two forms of this command define shortcuts/ligatures: the
first <string> is the text to replace, and the second argument is
either the Unicode number of the character to use instead, or a string
of which the first character is taken to be the desired replacement.
For example, to define the standard fi/fl ligatures, you could use

  h_ligate "fi", 0xfb01
  h_ligate "fl", 0xfb02

Where multiple replacements begin with the same substring, define the
shortest first, or the longer options will never be used.

If the second parameter is the bareword "remove" (without quotation
marks), any defined ligature/shortcut for the first parameter will be
undefined.

Some built-in sets define the shortcuts I personally use.  The
following commands exist:

* h_ligate none
  
Undefines all substitutions, including the curly-quotation-mark
shortcuts that are defined by default.

* h_ligate basic
  
Redefines the curly-quotation-mark shortcuts.

* h_ligate punctuation
  
Defines the following shortcuts:
    ...   ellipsis
    --    en dash
    ---   em dash
    (c)   copyright symbol
    (r)   registered trademark symbol
    (tm)  trademark symbol
    ++    dagger
    +++   double dagger
    **    bullet
    %_    non-breaking space
    %-    non-breaking hyphen
    %.    thin space

* h_ligate f_ligatures

Defines the fi, fl, ff, ffi, and ffl ligatures.

Note that these shortcuts are not processed in clickstr, and I doubt
they're processed in clickstr tests either.  Write your scripts in
full UTF-8 if you want to use the clickstr feature.  (But preferably
just don't use it; it's nasty.)


/---------------------------------------------------------------------
|  Style tags

Text appearance is controlled with inline tag blocks.  A tag block is
delimited by ~tildes~, and contains any number of tags, which may
optionally be separated with spaces.  Use ~~ to insert a literal
tilde.

Where a tag block appears in display text, its effects last until the
end of the current screen; to apply a style to multiple screens, use
h_fontstyle (see below). Tag blocks can also be embedded to style text
buttons, menu items, etc., in which case they last to the end of the
string in which they appear.

The following tags are recognised (N represents an arbitrary decimal
integer):

FONT STYLE TAGS

  cN  Select font in slot N

  d   Default style (equivalent to c0)
  
  r   Selects regular style (default)
  i   Toggles italic style
  t   Selects book weight (default)
  b   Toggles bold weight
  f   Selects text face (default)
  s   Toggles display face
  
These latter six tags deserve explanation.  They assume the following
font slot assignment convention:

  0   text book regular
  1   text book italic
  2   text bold regular
  3   text bold italic
  4   display book regular
  5   display book italic 
  6   display bold regular
  7   display bold italic

The ~d~ tag selects slot 0.  The remaining tags combine to select
other slots. In practice, all most users will need to know is "do
italics like ~i~this~i~".

For advanced users, it will be obvious that the implementation uses
bitmasks. The following example illustrates how tags interact:

  ^This is ~i~emphasised~i~.  So is ~i~this~r~.
  ^(The two are functionally identical.)\
  ^Regular text ~s~display ~bi~bold italic display ~t~italic display
  ^~si~regular text.\


FONT SIZE AND POSITION TAGS

  =N  Set font size to N pixels (0 sets it to the base font size)
  %N  Set font size to N% of the _base_ font size (as defined for the
      window)
  
  +N  Increase the _current_ font size by N pixels
  -N  Decrease the _current_ font size by N pixels
  
  xN  Set the horizontal text output position to N pixels right of the
      left margin
  yN  Set the vertical text output position to N pixels down from the
      top margin
  
  x+N  Shift the horizontal text output position N pixels to the right
  x-N  Shift the horizontal text output position N pixels to the left
  y+N  Shift the vertical text output position N pixels down
  y-N  Shift the vertical text output position N pixels up

As an example of the usage of these tags, Narcissu 2's omake mode
displays page headings at the top of each screen with code like

  ^!s0~i %120 x-20 y-40~ Concept~i %100~!sd

Here the !s0 and !sd are the usual NScripter commands.  The first tag
block selects italic text, 120% of the regular font size, and shifts
the output position up and to the left.  The second tag block cancels
the italic effect and resets the font size to normal.

This syntax was chosen for convenience of implementation, not for
elegance; the author apologises for the similarity of complex
formatting commands to Perl scripts.


INDENTATION TAGS

  n  Set indent at current x position. Subsequent newlines on the same
     screen will line up with this.
  
  u  Cancel any indent setting.

In addition to these tags, screens that begin with certain characters
(including opening quotes and em dashes) have indents set
automatically.  These characters can be overridden with the
"h_indentstr" command, though there will usually be no need to do
this.

Indentation example:

^**%.Item 1; if this text wraps, it will go back to the left margin.
^**%.~n~Item 2; if this text wraps it will line up with the bullet.~u~
^If there wasn't a ~~u~~ at the end of the last line, this would also 
^line up with the bullet.\


/---------------------------------------------------------------------
|  h_fontstyle <string>

Sets default font styling.  Equivalent to inserting ~d<string>~ at the
start of every subsequent text display command.  Note that this has no
effect on text sprites.

Only font style tags are usable in h_fontstyle sections; font size and
position tags are not supported.

For example, to set an entire section of the game in your italic
display font, use

  h_fontstyle ^si^
  ^Your text here\
  ^Several pages in italic display style\
  h_fontstyle ^d^


/---------------------------------------------------------------------
|  h_rendering <hinting>, <positioning>

Configures text rendering.

hinting:
  none = glyphs are rendered completely unhinted (default)
  full = glyphs are rendered with Freetype hinting
  light = glyphs are rendered with alternative Freetype hinting

  The optimum setting very much depends on the fonts in question and
  on the precise settings with which Freetype was compiled.  In
  general, Freetype hinting makes TrueType fonts look hideous, but it
  does sometimes help with Type 1 fonts.

positioning:
  integer = character positions are aligned to whole pixels (default)
  float = character positions use subpixel precision

  Theoretically the float mode should give better spacing, but it's
  broken and normally looks awful.  Feel free to try it if you feel
  adventurous, though.


/---------------------------------------------------------------------
|  h_textextent <ivar>,<string>,[size_x],[size_y],[pitch_x]

Sets <ivar> to the width, in pixels, of <string> as rendered in the
current sentence font.  If given, size_x, size_y, and pitch_x override
the current window settings (useful for calculating the size of
buttons etc.)


/---------------------------------------------------------------------
|  h_textheight <ivar>,<string>,[string...]

Sets <ivar> to the height, in pixels, that would be taken up if the
<strings> were printed as consecutive paragraphs on a single page in
the current text window.  The text is not actually displayed.

This can be used to align a block of text vertically:

  ; Centre text vertically in window
  h_textheight %var, ^Pretend this is long, maybe several lines.^
  h_locate 0, ([height of window] / 2) - (%var / 2)
  ^Pretend this is long, maybe several lines.\

  
/---------------------------------------------------------------------
|  h_centreline <string>

A basic hack to make it easier to centre text horizontally.

Sets the current x position to the expected location required to
centre the given <string> on screen (NOT in the window, which must be
large enough and appropriately positioned!) in the current sentence
font.  The text is not actually displayed.

Sample usage:

  h_centreline ^...that dazzling sun... that summer's day...^
  ^...that dazzling sun... that summer's day...\


/---------------------------------------------------------------------
|  br
|  br2 <amount>

In NScripter, the "br" command inserts a blank line of the same height
as a regular line of text.  In Ponscripter, it inserts precisely half
that amount of space, so paragraphs will not be so crazily far apart
by default.

Additionally, a new command "br2" is introduced.  The given <amount>
is the height of the blank space as a percentage of the height of a
regular line of text. In other words, "br2 50" is equivalent to "br",
while "br2 100" is equivalent to the "br" command in standard
NScripter.


/---------------------------------------------------------------------
|  gettextspeed <ivar>

There's probably already a way to retrieve the current text speed, but
I couldn't find it, so I added one.  Now you can do

  gettextspeed %var
  textspeed 0
  ^Fast text!\
  textspeed %var

without having to worry about what the text speed was before you set
it to 0.


/---------------------------------------------------------------------
|  Command changes 1: size and position

Earlier versions of Ponscripter modified locate and setwindow to
operate in pixels rather than characters.  This has now been reverted,
and instead alternative pixel-based commands are provided; locate and
setwindow are retained for compatibility, but they are deprecated.

/---------------------------------------------------------------------
|  h_locate <x>, <y>

A pixel-based replacement for locate.  It works just how you'd expect.
In particular, movements performed by h_locate (but not locate) are
remembered and will be repeated when scrolling back through viewed
text.

/---------------------------------------------------------------------
|  h_defwindow <name>, (definition)
|  h_usewindow <name>

Instead of defining the full window every time it changes, you should
define your windows only once, and then refer back to those central
definitions as appropriate.

h_defwindow takes a name followed by the same parameters as setwindow,
EXCEPT THAT only one font size parameter is given.  h_usewindow then
refers back to this name.

Currently no validation is performed on the name, so attempting to use
a window that has not been defined will probably cause a horrible
crash.  So don't do that.

In other words, instead of defining an ad-hoc window at the point of
use with a command like

  setwindow 150,358,35,17,17,17,0,3,1,1,5,#ffffff,0,0,799,599

you should define the window once with

  h_defwindow "main", 150,358,540,240,19,0,0,1,1,5,#ffffff,0,0,799,599

in the *define section, and then instead of setwindow commands, simply

  h_usewindow "main"

suffices.


/---------------------------------------------------------------------
|  Command changes 2: sprite extension

The lsp command has been extended slightly.

In ONScripter, an English text sprite would be created using a
definition string like

  ":s/[xsize],[ysize],[pitch];#FORECOLOUR#BACKCOLOUR`text"

There are three changes in Ponscripter.

* Firstly, obviously the ` is replaced with ^ and text tags are
  permitted after it.

* Secondly, if ":S/" is used in place of ":s/", the x position of the
  sprite is measured relative to its centre, rather than to the left
  edge; this makes it easier to create centered dialog buttons and the
  like.

* Thirdly, the ysize, pitch, and colour parameters become optional.
  If pitch is not given, it defaults to 0.  If ysize is not given, it
  defaults to xsize.  The colours can be omitted by giving them as ##
  instead, in which case they default to white and black respectively.


/---------------------------------------------------------------------
|  Soft subtitles

An easy method to subtitle an MPEG video is provided by extending the
plaympeg command to take an additional optional argument, which gives
the name of a file containing subtitle definitions.  Within this file,
whole-line comments are permitted with ;.

There are two types of line.  One defines layouts:

  define <number>,<pos>,[colour],[alpha]

where "number" is a zero-based one-up reference, "colour" is an
NScripter-style colour definition ("#RRGGBB"), "pos" is the vertical
location of subtitles with this number, and "alpha" is its opacity (0
= transparent, 255 = opaque).  Both colour and alpha are optional; if
they default to white and opaque respectively.

The other type of line defines subtitles themselves:

  <float>,<float>,<integer>,<arbitrary text>

where the first number gives the time to display the subtitle, the
second the time to remove it, the third indicates which subtitle to
change, and the remainder of the line is interpreted as a text sprite
definition which is overlaid on the video during the given times.

The order of these lines is irrelevant; only the times are meaningful.
If two subtitles with the same number have overlapping time spans,
then the second will replace the first at its given start time, but
will disappear at the earlier of the two end times.  To display
multiple subtitles at the same time, use different numbers.

Note that none of this applies to AVI files -- only MPEG files can be
soft-subbed at present.


/---------------------------------------------------------------------
|  Enhanced OS X support

OS X support in Ponscripter is enhanced in the same way as in
ONScripter-En, namely:

1. Data files (script, fonts, archives) are stored in the
   Contents/Resources directory within the application bundle.  This
   means your game will appear as a single drag-to-install icon, not
   as an untidy bunch of files.

2. Saved games and configuration settings are stored in a subdirectory
   of the user's ~/Library/Preferences, not in the directory holding
   the program. This again makes it possible to treat the game as a
   regular OS X application.  The name of the directory is based on
   the ;gameid directive (see "Directives" above).


/---------------------------------------------------------------------
|  Enhanced Windows support (incl. Vista)

As described in "Directives", on modern Windows systems saved games
and configuration settings are stored in the All Users profile, which
retains the shared nature of these that NScripter users expect while
avoiding problems with limited user accounts being unable to write to
Program Files.

Additionally, diagnostic output (the "stdout.txt" and "stderr.txt"
files) is placed in All Users\Application Data\Ponscripter.  (This
folder is always created at launch, but is removed automatically if a
game is run without emitting any diagnostic output.)

The result of this is that games can be run on Vista without requiring
privilege escalation and without writing to users' virtual stores.
Since saved games are placed in a single shared location, it is also
possible to reliably perform a clean uninstallation of a Ponscripter
game, removing saved games. (Naturally this behaviour should be
optional!)

On ancient versions of Windows that do not support the required APIs
(basically just Windows 95 without IE 5), this behaviour will
theoretically degrade gracefully to the standard ONScripter behaviour,
though I have not actually checked whether such platforms are even 
capable of running Ponscripter in the first place.


/---------------------------------------------------------------------
|  Features removed

  Ruby, tategaki

Largely meaningless in Western text. Both can be simulated in small
quantities if required by judicious use of h_textextent and font
size/position tags.

  Glyph caching

You may theoretically notice slightly poorer performance rendering
long runs of text.  In practice I haven't noticed any effect at all,
and removing both independent glyph caches has simplified the code
considerably.


/---------------------------------------------------------------------
|  Builds

Fonts and icons can be embedded in the game executable.  This is
primarily useful on Windows, since OS X's bundles already provide this
functionality.  For icons, embed the file "icon.png".  (Note that this
will not give the file a Windows icon resource, which must be provided
separately.)

Other platforms (primarily Linux) are harder to provide binary
packages for.  It is recommended that you cater for such platforms by
providing a package containing just the data files and a basic
installation script which installs those data files and creates a
launcher script; Ponscripter itself should be considered an external
dependency which is to be satisfied by the user him/herself, either by
compiling it from source or by installing a platform-specific binary
package.

For example, your tarball might contain simply
  
  mygame/
  install.sh
  README

where "mygame" contained the game data, and "README" included
instructions to run "sudo sh install.sh" or equivalent.  install.sh in
turn could be something as simple as

  #! /bin/sh
  WHERE=${PREFIX:-/usr/local}
  DAT=$WHERE/share/games/mygame
  BIN=$WHERE/bin
  mkdir -p $DAT
  mkdir -p $BIN
  cp -r mygame/* $DAT
  echo "#! /bin/sh
  ponscr -r $DAT" > $BIN/mygame
  chmod 755 $BIN/mygame

...though you might want to take some time to improve the interface
and fix the numerous portability issues in the above, or even to
provide binary packages for popular free operating systems.  (With
dependencies on a binary Ponscripter package, of course, which you're
welcome to provide yourself.)


/---------------------------------------------------------------------
|  Widescreen fix

Some widescreen displays don't provide an easy way to preserve aspect
ratios.

The current Ponscripter includes a workaround for this: pressing "w"
ingame will switch to fullscreen mode and toggle a flag that, when
set, causes aspect ratio to be preserved.

Since I'm lazy, I implemented this the simplest possible way, which
was to hack SDL itself.  This therefore only works if Ponscripter is
compiled with the internal SDL from extlib/src/SDL-1.2.13; linking
against external SDLs will disable the functionality.  Note that an
external SDL is used by default if present, so you may have to pass
the --with-internal-sdl flag to configure if you wish your builds to
contain this feature.


/---------------------------------------------------------------------
|  Support

ONScripter is GPL software, and so Ponscripter is as well.  Source
code is therefore available.

I cannot guarantee support beyond that, but naturally I will do my
best to fix any bugs you find, if time permits.
