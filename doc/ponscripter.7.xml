<?L <!-- ?><!DOCTYPE book PUBLIC "-*-nxml-*-" "">
<book xmlns="http://docbook.org/ns/docbook"
xmlns:xl="http://www.w3.org/1999/xlink"><reference><title/><?L --> ?>

<refentry xml:id="ponscripter.7">
  <info>
    <date><?D?></date>
  </info>
  <refmeta>
    <refentrytitle>ponscripter</refentrytitle>
    <manvolnum>7</manvolnum>
  </refmeta>
  
  <refnamediv>
    <refname>ponscripter</refname>
    <refpurpose>Ponscripter overview</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Description</title>
    <para>
      <firstterm>Ponscripter</firstterm> is an interpreter for
      visual-novel-type games, derived from the NScripter design but
      modified significantly to improve support for Western languages
      (at the cost of diminished support for Japanese).
    </para>

    <refsect2>
      <title>Documentation contents</title>
      <para>
        Ponscripter documentation is split into a number of sections.
      </para>
      <para>
        This page provides an overview of Ponscripter itself and the
        overall structure of a game.
      </para>
      <para>
        The other sections are:
        <variablelist>
          <varlistentry>
            <term>&ponscr.6;</term>
            <listitem>
              <simpara>
                The <command>ponscr</command> binary: invocation,
                usage, and implementation notes.
              </simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>&ponscr-syntax.7;</term>
            <listitem>
              <simpara>
                Syntax of a Ponscripter script.
              </simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>&ponscr-ext.7;</term>
            <listitem>
              <simpara>
                Commands that don't exist, or behave differently, in
                other NScripter-type interpreters.
              </simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </refsect2>

    <refsect2>
      <title>NScripter implementations</title>
      <para>
        <firstterm>NScripter</firstterm> is a popular novel-game
        engine written by <personname><firstname>Naoki</firstname>
        <surname>Takahashi</surname></personname>.  It's available at
        no cost even for commercial use, but its source code is not
        free, and it's only supported on <productname>Microsoft
        Windows</productname>.  Since it has been used to drive a
        large number of popular commercial and amateur games, this has
        inspired a number of open-source cloning efforts.  As the
        original implementation, it serves as the definition of the
        NScripter standard; sadly its documentation leaves something
        to be desired.
      </para>
      <para>
        <personname><othername
        role='handle'>Ogapee</othername></personname>'s
        <firstterm>ONScripter</firstterm> is the most significant of
        the clones.  It supports a wide range of platforms, including
        handheld devices.  When the attention of the English-speaking
        fan translation community turned to NScripter games,
        ONScripter was the interpreter we chose to adapt to better
        support the English language.  The official ONScripter source
        code can be compiled with basic English support; since
        ONScripter development is aimed more at supporting new
        Japanese games and new platforms than at supporting
        localisation, the English-speaking community also maintains a
        branch called <firstterm>ONScripter-En</firstterm> which has a
        number of improvements of interest to us, including better
        English support as standard.
      </para>
      <para>
        <firstterm>Ponscripter</firstterm> is a fork of ONScripter-En
        that drops any attempt to remain in synch with the upstream
        source code, and instead concentrates on providing the best
        possible support for Western languages.  It is no longer fully
        NScripter-compatible, but remains an easy target to port
        NScripter games to when localising them.
      </para>
      <para>
        The main enhancements are support for Unicode and for
        formatted text, including multiple fonts and styles, with
        proportional spacing, kerning, ligatures, arbitrary text size
        and position, etc.
      </para>
    </refsect2>

    <refsect2>
      <title>Basic game structure</title>
      <para>
        Ponscripter games consist of a directory containing scripts,
        either in NScripter format or an extended derived format, plus
        other files (graphics, sound, fonts, etc) on which the script
        depends; these may be packed into archives in the NScripter
        <filename>NSA</filename> or <filename>SAR</filename> formats.
      </para>
      <para>
        Unlike other NScripter-derived interpreters, which attempt to
        a greater or lesser degree to support Japanese filenames,
        Ponscripter requires that all files have plain ASCII names.
        It's the only way to be portable.
      </para>
    </refsect2>

    <refsect2>
      <title>Script files</title>
      <para>
        Ponscripter is able to read two styles of script: native and
        legacy.  Native scripts are encoded in UTF-8, and provide
        all the features documented below.  Legacy scripts are an
        attempt to provide a modicum of backwards-compatibility:
        they are NScripter-format scripts, in CP932 (Microsoft's
        version of Shift_JIS) with some of the same extensions as
        provided by ONScripter-En.  Many Ponscripter features are
        disabled when processing a legacy script.  There is little
        reason to use them, unless you want to try to play an
        unported NScripter game using proportional fonts.  It's
        better to port where possible.
      </para>
      <para>
        Script formats are distinguished by filename.  The following
        filenames are sought, in this order:
        <variablelist>
          <varlistentry>
            <term><filename>0.utf</filename></term>
            <listitem>
              <simpara>
                Native script in human-readable form.
              </simpara>
              <simpara>
                Human-readable scripts can be multipart: the engine
                checks all numbers from 1 to 99 (both with and
                without leading zeroes, for numbers below 10), and
                appends them to script 0.
              </simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><filename>0.txt</filename></term>
            <listitem>
              <simpara>
                Legacy script in human-readable form.  Can be
                multipart, as for native scripts.
              </simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><filename>nscr_sec.dat</filename></term>
            <listitem>
              <simpara>
                Legacy script, trivially obfuscated by xoring against
                a fixed cyclic key with hexadecimal representation
                <literal>79 57 0D 80 04</literal>.
              </simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><filename>nscript.___</filename></term>
            <listitem>
              <simpara>
                Legacy script, trivially obfuscated using a key
                file.
              </simpara>
              <simpara>
                The key must be supplied using the
                <option>--key-exe</option> parameter to &ponscr.6;.
                This file is used to construct a simple permutation
                table holding the plaintext equivalents to each byte
                of the obfuscated file.
              </simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><filename>pscript.dat</filename></term>
            <listitem>
              <simpara>
                Native script, trivially obfuscated by xoring against
                the constant byte <literal>0x84</literal>.
              </simpara>
              <simpara>
                This is the only form of obfuscation supported for
                native scripts.  It does not pretend to provide any
                security, but protects careless tinkerers from
                accidental spoilers.
              </simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><filename>nscript.dat</filename></term>
            <listitem>
              <simpara>
                Legacy script, trivially obfuscated as for
                <filename>pscript.dat</filename>.
              </simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </refsect2>

    <refsect2>
      <title>Script structure</title>
      <para>
        Scripts are conventionally divided into three sections:
        <firstterm>directives</firstterm>,
        <firstterm>define</firstterm>, and
        <firstterm>game</firstterm>.
      </para>
      <para>
        In reality these are parsing modes, rather than lexical
        sections, and control flow can be mixed up with unscrupulous
        use of <function>goto</function> and <function>skip</function>
        commands, but best practice is to keep concerns strictly
        separate.
      </para>
      <para>
        A skeleton script has the following form:
        <programlisting>
; directives
*define
; define section
game
*start
; game section
end
        </programlisting>
      </para>
    </refsect2>

    <refsect2 xml:id="directives">
      <title>The Directives section</title>
      <para>
        The directives section is optional.  It consists of one or two
        directive lines at the very top of the first script file;
        these are processed during interpreter initialisation.
      </para>
      <para>
        The first directive line begins with a semicolon and contains
        one or more comma-separated tags:
        <variablelist>
          <varlistentry>
            <term><literal>mode</literal> <replaceable>NUM</replaceable></term>
            <listitem>
              <simpara>
                Sets the screen mode to the 4:3 resolution with
                horizontal dimension <replaceable>NUM</replaceable>.
                Values recognised are <literal>800</literal> (by 600),
                <literal>640</literal> (by 480),
                <literal>400</literal> (by 300), and
                <literal>320</literal> (by 240).  The default is
                <literal>640</literal>.
              </simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>value</literal> <replaceable>NUM</replaceable></term>
            <listitem>
              <simpara>
                Sets the global variable border; variables with
                indices greater than or equal to
                <replaceable>NUM</replaceable> will become globals if
                the <function>globalon</function> command is used.
                The default is <literal>200</literal>.
              </simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>-*-</literal>
              <replaceable>anything</replaceable>
              <literal>-*-</literal>
            </term>
            <listitem>
              <simpara>
                Tags of this format are used by popular text editors
                such as &emacs.1; to identify the format of a file.
              </simpara>
              <simpara>
                Ponscripter ignores everything between the
                <literal>-*-</literal> delimiters, so users of such
                editors can use this feature as expected.
              </simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      <para>
        The second directive line, if present, has the form
        <programlisting>
;gameid <replaceable>text</replaceable>
        </programlisting>
      </para>
      <para>
        This is used to specify the name of the game.  The
        <firstterm>gameid</firstterm> thus defined is used when
        automatically selecting a path for saved games and other
        variable data (see <link
        linkend="option-save"><option>--save</option></link> in
        &ponscr.6;).
      </para>
      <para>
        Ideally you should always specify a gameid with this
        directive.  If you don't, Ponscripter tries to determine the
        name of the game by looking for a <function>caption</function>
        or <function>versionstr</function> command; if that also
        fails, a semi-unique identifier is generated based on the
        length of the script.
      </para>
      <para>
        A complete directives section might thus have the form
        <programlisting>
;mode800,value500,-*- ponscripter -*-
;gameid My Ponscripter game
        </programlisting>
        which would specify a game called <quote>My Ponscripter
        game</quote> that used an 800x600 display, treated all
        variables indexed 500 and above as globals, and would be
        easily identified as a Ponscripter script.
      </para>
    </refsect2>

    <refsect2>
      <title>The Define section</title>
      <para>
        The define section is mandatory, and is typically placed at
        the start of the first script file, after any directives
        section and before the game section.
      </para>
      <para>
        It is introduced with the label <code>*define</code>, and
        continues until a <function>game</function> command is
        encountered.
      </para>
      <para>
        Code in this section is evaluated non-interactively at
        startup, and then only touched again if the
        <function>definereset</function> command is used.  It contains
        definitions of things like aliases, arrays, windows,
        subroutines, and fonts.  Most of the commands valid in this
        section are invalid in game code, and vice versa.
      </para>
    </refsect2>

    <refsect2>
      <title>The Game section</title>
      <para>
        The game section is mandatory, and makes up the bulk of the
        script.  It typically follows the define section.
      </para>
      <para>
        It is introduced with the <function>game</function> command,
        which transfers control immediately to the
        <literal>*start</literal> label (which must exist, and is
        normally the next thing in the script).
      </para>
      <para>
        Processing then remains in game mode until an
        <function>end</function> command, which terminates the
        program, or a <function>definereset</function> command, which
        returns processing to define mode at the
        <literal>*define</literal> label.
      </para>
    </refsect2>
  </refsect1>

  <refsect1>
    <title>See also</title>
    <para>
      <simplelist type='inline'>
        <member>&ponscr.6;</member>
        <member>&ponscr-syntax.7;</member>
        <member>&ponscr-ext.7;</member>
      </simplelist>
    </para>
    <para>
      Existing NScripter documentation, for a description of the basic
      operation of NScripter-style games and documentation of most of
      the functionality supported.  Most NScripter references are only
      available in Japanese, but there is some English-language
      documentation at <link xl:href='http://nscripter.insani.org'/>.
    </para>
  </refsect1>
  
</refentry>

<?L <!-- ?></reference></book><?L --> ?>
