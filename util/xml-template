#! /usr/bin/perl -p
# Generate manual.xml from templates.
#
# See manual.xml.in for excuses about the template system in general.
#
# I will not try to excuse the implementation, which has probably
# earned me a special place in programmer hell.  :D

use POSIX 'strftime';
BEGIN { $mode = shift }

# Process includes
s(<\?I\s*(.*?)\?>){
    for ($i = $1) { s/(\$\w+)/$1/eeg; s/^\s*|\s*$//g }
    $d = strftime "%Y-%m-%d", gmtime((stat "doc/$i")[9]);
    ($c = `$0 $mode doc/$i`) =~ s/<\?D\?>/$d/g; $c
}ges;

# Process literals
s/<\?L\s(.*?)\?>/$1/gs;

# Process conditional literals
s/<\?IF(\w+)\s(.*?)\?>/ lc $1 eq lc $mode ? $2 : '' /ges;

# Process <?link?>
s(<\?link\s*([^:]+):\s*(.*?)\s*\?>)
 {$mode eq 'man' ? "<quote>$2</quote>" : qq{<link linkend="$1">$2</link>} }ges;

# Chomp certain annoying whitespace that messes up manpages
s(  (para|name)> \s*\n\s* ([<&])                 ){$1>$2}gx;
s( ([>;]) \s*\n\s* </((sim)?para|(file|var)name) ){$1</$2}gx;
s(       (<programlisting[^>]*>) \n ){$1}gx;
s( \n\s* (</programlisting>)        ){$1}gx;

# Format <firstterm> with bold text.  Life's too short to figure out
# how to do this with XSLT.
if ($mode eq 'man') {
    s|(<firstterm[^>]*>)|$1<emphasis role="bold">|g;
    s|(</firstterm>)|</emphasis>$1|g;
}
